/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visao.devedouros;

import Controle.ModeloTabela;
import DAO.ConnectionFactory;
import DAO.DevedourosDAO;
import DAO.cliente.ClienteDAO;
import DAO.venda.ParcelaDAO;
import Modelo.Cliente.ModeloCliente;
import Modelo.ModeloDevedor;
import Visao.pedidoLocacao.Locacao;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.TableRowSorter;
import threads.MinhaThread;

/**
 *
 * @author usuario
 */
public class VisaoDevedouros extends javax.swing.JFrame {

    private float valor;

    /**
     * Creates new form VisaoDevedouros
     */
    public VisaoDevedouros() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableLocacao = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setText("Calcular");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTableLocacao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(jTableLocacao);

        jButton2.setText("Listar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 1035, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jButton1)
                .addGap(33, 33, 33)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            treeds();        // TODO add your handling code here:
            listarDevedores();
        } catch (SQLException ex) {
            Logger.getLogger(VisaoDevedouros.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(VisaoDevedouros.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        listarDevedores(); // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisaoDevedouros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisaoDevedouros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisaoDevedouros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisaoDevedouros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VisaoDevedouros().setVisible(true);
            }
        });
    }

    private ModeloDevedor totalapagarVencidas(Long idCliente) throws SQLException {
        Connection connection = new ConnectionFactory().getConnection();
        ParcelaDAO parcelasDAO = new ParcelaDAO(connection);
        ModeloDevedor modeloDevedor = new ModeloDevedor();
        DevedourosDAO devedourosDAO = new DevedourosDAO(connection);
        ModeloDevedor modeloDevedortreed = new ModeloDevedor();

        float valor;
        float valorAPagarVendaVencidas = parcelasDAO.SomaTotalValorPagarVendaVencidasDevedores(idCliente);

        float valorPagoVendaVencidas = parcelasDAO.SomaTotalValorPagoVendaVencidosDevedores(idCliente);

        float valorTotalDevidoVendaVencidas = valorAPagarVendaVencidas - valorPagoVendaVencidas;

        float valotTotalDevidoLocacaoVencidas = parcelasDAO.SomaTotalValorASerpagoLocaçãoVencidasDevedores(idCliente);
        float valorPagoLocacaoVencidas = parcelasDAO.SomaTotalValorPagoLocaçãoVencidasDevedores(idCliente);

        float valorTotalVencidas = valorTotalDevidoVendaVencidas + valotTotalDevidoLocacaoVencidas;

        boolean result = false;
        if (valorTotalVencidas > 0) {
            result = true;
        }
        connection.close();
        modeloDevedor.setValor(valorTotalVencidas);
        modeloDevedor.setDevendo(result);
        modeloDevedor.setIdCliente(idCliente);

        result = false;

        if (modeloDevedortreed.isDevendo()) {
            if (devedourosDAO.verificacaoDevedores(modeloDevedor.getIdCliente())) {

                devedourosDAO.altera(modeloDevedor);
            } else {

                devedourosDAO.adcionar(modeloDevedor);
            }

        } else {

            devedourosDAO.adcionar(modeloDevedor);
        }

        return modeloDevedor;

    }

    private void treeds() throws SQLException, InterruptedException {
        List<MinhaThread> mt = new ArrayList();
        Connection connection = new ConnectionFactory().getConnection();

        ClienteDAO clienteDAO = new ClienteDAO(connection);
        List<ModeloCliente> clientes2 = new ArrayList<ModeloCliente>();
        clientes2 = clienteDAO.lista();
        connection.close();
        for (ModeloCliente cl : clientes2) {
            MinhaThread mt2 = new MinhaThread(cl.getId());
            mt.add(mt2);
        }
        int cont = 0;
        for (MinhaThread mt3 : mt) {

            mt3.run();
           

            cont++;

        }
        

    }

    private void verificarDevedouros() throws SQLException {
        Connection connection = new ConnectionFactory().getConnection();

        ClienteDAO clienteDAO = new ClienteDAO(connection);
        DevedourosDAO devedourosDAO = new DevedourosDAO(connection);
        ModeloDevedor modeloDevedortreed = new ModeloDevedor();
        List<ModeloCliente> clientes2 = new ArrayList<ModeloCliente>();
        ModeloDevedor modeloDevedor = new ModeloDevedor();
        clientes2 = clienteDAO.lista();
        boolean result;

        for (ModeloCliente md : clientes2) {
            result = false;

            modeloDevedortreed = totalapagarVencidas(md.getId());

            if (modeloDevedortreed.isDevendo()) {
                if (devedourosDAO.verificacaoDevedores(md.getId())) {
                    result = true;

                    modeloDevedor.setIdCliente(md.getId());
                    modeloDevedor.setValor(valor);

                    //devedourosDAO.altera(modeloDevedor, result);
                } else {
                    result = true;

                    modeloDevedor.setValor(valor);
                    modeloDevedor.setIdCliente(md.getId());
                    // devedourosDAO.adcionar(modeloDevedor, result);
                }

            } else {
                result = false;

                modeloDevedor.setValor(valor);
                modeloDevedor.setIdCliente(md.getId());
                // devedourosDAO.adcionar(modeloDevedor, result);
            }
        }

        connection.close();
    }

    private void listarDevedores() {
        Connection connection;
        try {
            connection = new ConnectionFactory().getConnection();

            DevedourosDAO devedourosDAO = new DevedourosDAO(connection);

            List<ModeloDevedor> modeloDevedors = new ArrayList<ModeloDevedor>();
            modeloDevedors = devedourosDAO.lista();
            ClienteDAO clienteDAO = new ClienteDAO(connection);
            String[] colunas = new String[]{"ID", "Nome", "Valor"};
            ArrayList dados = new ArrayList();

            for (ModeloDevedor v : modeloDevedors) {

                dados.add(new Object[]{v.getIdCliente(), clienteDAO.buscaPorId(v.getIdCliente()).getNome(), v.getValor()});

            }

            ModeloTabela modelo = new ModeloTabela(dados, colunas);
            jTableLocacao.setModel(modelo);
            jTableLocacao.setRowSorter(new TableRowSorter(modelo));
            jTableLocacao.getColumnModel().getColumn(0).setPreferredWidth(2);
            jTableLocacao.getColumnModel().getColumn(0).setResizable(false);
            jTableLocacao.getColumnModel().getColumn(1).setPreferredWidth(20);
            jTableLocacao.getColumnModel().getColumn(1).setResizable(false);
            jTableLocacao.getColumnModel().getColumn(2).setPreferredWidth(20);
            jTableLocacao.getColumnModel().getColumn(2).setResizable(false);
            connection.close();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex);

            Logger.getLogger(Locacao.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTableLocacao;
    // End of variables declaration//GEN-END:variables
}
