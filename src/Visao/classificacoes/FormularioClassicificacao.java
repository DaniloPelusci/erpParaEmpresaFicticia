/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visao.classificacoes;

import DAO.ConnectionFactory;
import DAO.banco.BancoDAO;
import DAO.cliente.RamoAtividadeDAO;
import DAO.cliente.RotasDAO;
import DAO.fornecedor.TipoFornecedorDAO;
import DAO.funcionario.CargoDAO;
import DAO.pedido.TipoPedidoDAO;
import DAO.venda.TipoPagamentoDAO;
import Modelo.Cliente.ModeloRamoAtividade;
import Modelo.Cliente.ModeloRota;
import Modelo.Fornecedor.ModeloTipoFornecedor;
import Modelo.Funcionario.ModeloCargo;
import Modelo.Pedido.ModeloTipoPedido;
import Modelo.banco.ModeloBanco;
import Modelo.venda.ModeloTipoPagamento;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author SERVIDOR
 */
public class FormularioClassicificacao extends javax.swing.JFrame {

    int tipo;

    /**
     * Creates new form FormularioTipos
     */
    public FormularioClassicificacao(int tipo) throws SQLException {

        initComponents();
        //1= cargos 2= ramoatividades 3= tipo de fornecedor 4=banco 5=tipo de pedido 6 = tipo Pagamento 7= Tipo Rota
        this.tipo = tipo;
        if (tipo == 1) {
            jLabelClassificacao.setText("Cargos");

        } else if (tipo == 2) {
            jLabelClassificacao.setText("Ramoatividade");
        } else if (tipo == 3) {
            jLabelClassificacao.setText("Tipo de Fornecedor");
        } else if (tipo == 4) {
            jLabelClassificacao.setText("Banco");
        } else if (tipo == 5) {
            jLabelClassificacao.setText("Tipo de pedido");
        } else if (tipo == 6) {
            jLabelClassificacao.setText("Tipo de Pagamento");
        } else if (tipo == 7) {
            jLabelClassificacao.setText("Rota");
        }
        PreencherTabela(tipo);
        ativaDesativaCampos(false);
    }

    private FormularioClassicificacao() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldNOME = new javax.swing.JTextField();
        jButtonNovo = new javax.swing.JButton();
        jButtonSalvar = new javax.swing.JButton();
        jButtonAlterar = new javax.swing.JButton();
        jButtonPesquisar = new javax.swing.JButton();
        jButtonExcluir = new javax.swing.JButton();
        jButtonSair = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableTIPO = new javax.swing.JTable();
        jLabelClassificacao = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("E.B.O. Formulario de Classificações");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setText("ID");

        jTextFieldID.setEnabled(false);
        jTextFieldID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldIDActionPerformed(evt);
            }
        });

        jLabel2.setText("Nome");

        jButtonNovo.setText("Novo");
        jButtonNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNovoActionPerformed(evt);
            }
        });

        jButtonSalvar.setText("Salvar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });

        jButtonAlterar.setText("Alterar");
        jButtonAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlterarActionPerformed(evt);
            }
        });

        jButtonPesquisar.setText("Pesquisar");
        jButtonPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisarActionPerformed(evt);
            }
        });

        jButtonExcluir.setText("Excluir");
        jButtonExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirActionPerformed(evt);
            }
        });

        jButtonSair.setText("Sair");
        jButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairActionPerformed(evt);
            }
        });

        jTableTIPO.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableTIPO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableTIPOMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableTIPO);

        jLabelClassificacao.setText("Classificação");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jButtonNovo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonSalvar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonAlterar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonPesquisar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSair))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addComponent(jLabelClassificacao)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldNOME, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabelClassificacao)
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNOME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNovo)
                    .addComponent(jButtonSalvar)
                    .addComponent(jButtonAlterar)
                    .addComponent(jButtonPesquisar)
                    .addComponent(jButtonExcluir)
                    .addComponent(jButtonSair))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldIDActionPerformed

    private void jButtonNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNovoActionPerformed
        ativaDesativaCampos(true);

        jTextFieldID.setText("");
        jTextFieldNOME.setText("");
    }//GEN-LAST:event_jButtonNovoActionPerformed

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed
        try (Connection connection = ConnectionFactory.getConnection()) {
            //1= cargos 2= ramoatividades 3= tipo de fornecedor 4=banco
            if (validacao().isEmpty()) {

                if (tipo == 1) {
                    //cargo
                    CargoDAO cargoDAO = new CargoDAO(connection);
                    ModeloCargo modeloCargo = new ModeloCargo();
                    modeloCargo.setNome(jTextFieldNOME.getText().toUpperCase());
                    if (validacao().isEmpty()) {

                    }
                    String idSalvar = jTextFieldID.getText();
                    if (idSalvar.equals("")) {
                        cargoDAO.adiciona(modeloCargo);

                    } else {
                        modeloCargo.setId(Long.parseLong(idSalvar));

                        cargoDAO.altera(modeloCargo);

                    }
                } else if (tipo == 2) {
                    //Ramoatividade
                    RamoAtividadeDAO ramoAtividadeDAO = new RamoAtividadeDAO(connection);
                    ModeloRamoAtividade modeloRamoAtividade = new ModeloRamoAtividade();
                    modeloRamoAtividade.setNome(jTextFieldNOME.getText().toUpperCase());

                    String idSalvar = jTextFieldID.getText();
                    if (idSalvar.equals("")) {
                        ramoAtividadeDAO.adiciona(modeloRamoAtividade);

                    } else {
                        modeloRamoAtividade.setId(Long.parseLong(idSalvar));

                        ramoAtividadeDAO.altera(modeloRamoAtividade);

                    }

                } else if (tipo == 3) {
                    //tipo de fornecedor
                    TipoFornecedorDAO tipoFornecedorDAO = new TipoFornecedorDAO(connection);
                    ModeloTipoFornecedor modeloTipoFornecedor = new ModeloTipoFornecedor();
                    modeloTipoFornecedor.setNome(jTextFieldNOME.getText().toUpperCase());

                    String idSalvar = jTextFieldID.getText();
                    if (idSalvar.equals("")) {
                        tipoFornecedorDAO.adiciona(modeloTipoFornecedor);

                    } else {
                        modeloTipoFornecedor.setId(Long.parseLong(idSalvar));

                        tipoFornecedorDAO.altera(modeloTipoFornecedor);

                    }
                } else if (tipo == 4) {
                    //Banco
                    BancoDAO bancoDAO = new BancoDAO(connection);
                    ModeloBanco modeloBanco = new ModeloBanco();
                    modeloBanco.setNome(jTextFieldNOME.getText().toUpperCase());

                    String idSalvar = jTextFieldID.getText();
                    if (idSalvar.equals("")) {
                        bancoDAO.adiciona(modeloBanco);

                    } else {
                        modeloBanco.setId(Long.parseLong(idSalvar));

                        bancoDAO.altera(modeloBanco);

                    }

                } else if (tipo == 5) {
                    //tipo de pedido
                    TipoPedidoDAO tipoPedidoDAO = new TipoPedidoDAO(connection);
                    ModeloTipoPedido modeloTipoPedido = new ModeloTipoPedido();
                    modeloTipoPedido.setNome(jTextFieldNOME.getText().toUpperCase());

                    String idSalvar = jTextFieldID.getText();
                    if (idSalvar.equals("")) {
                        tipoPedidoDAO.adiciona(modeloTipoPedido);

                    } else {
                        modeloTipoPedido.setId(Long.parseLong(idSalvar));

                        tipoPedidoDAO.altera(modeloTipoPedido);

                    }

                } else if (tipo == 6) {
                    //tipo de pedido
                    TipoPagamentoDAO tipoPagamentoDAO = new TipoPagamentoDAO(connection);
                    ModeloTipoPagamento modeloTipoPagamento = new ModeloTipoPagamento();
                    modeloTipoPagamento.setNome(jTextFieldNOME.getText().toUpperCase());

                    String idSalvar = jTextFieldID.getText();
                    if (idSalvar.equals("")) {
                        tipoPagamentoDAO.adiciona(modeloTipoPagamento);

                    } else {
                        modeloTipoPagamento.setId(Long.parseLong(idSalvar));

                        tipoPagamentoDAO.altera(modeloTipoPagamento);

                    }
                } else if (tipo == 7) {
                    //tipo de rota
                    RotasDAO rotasDAO = new RotasDAO(connection);
                    ModeloRota modeloRota = new ModeloRota();
                    modeloRota.setNome(jTextFieldNOME.getText().toUpperCase());

                    String idSalvar = jTextFieldID.getText();
                    if (idSalvar.equals("")) {
                        rotasDAO.adiciona(modeloRota);

                    } else {
                        modeloRota.setId(Long.parseLong(idSalvar));

                        rotasDAO.altera(modeloRota);

                    }

                }
                JOptionPane.showMessageDialog(rootPane, "Dados Inseridos Com Sucesso");

            } else {
                String message = validacao();

                JOptionPane.showMessageDialog(null, message, "Aviso", JOptionPane.INFORMATION_MESSAGE);

            }

            PreencherTabela(tipo);
            connection.close();
        } catch (SQLException ex) {
            
            JOptionPane.showMessageDialog(null, " Falha no Armazenamento de dados \n ERRO :" + ex);
        }
        jTextFieldID.setText("");
        jTextFieldNOME.setText("");

    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void jButtonAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlterarActionPerformed
        ativaDesativaCampos(true);
    }//GEN-LAST:event_jButtonAlterarActionPerformed

    private void jButtonPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisarActionPerformed
        try (Connection connection = ConnectionFactory.getConnection()) {
            if (tipo == 1) {
                //cargo
                CargoDAO cargoDAO = new CargoDAO(connection);

                jTableTIPO.setModel(cargoDAO.buscaLike(jTextFieldNOME.getText().toUpperCase()));
            } else if (tipo == 2) {
                //nomenclatura
                RamoAtividadeDAO ramoAtividadeDAO = new RamoAtividadeDAO(connection);
                jTableTIPO.setModel(ramoAtividadeDAO.buscaLike(jTextFieldNOME.getText().toUpperCase()));
            } else if (tipo == 3) {
                TipoFornecedorDAO tipoFornecedorDAO = new TipoFornecedorDAO(connection);
                jTableTIPO.setModel(tipoFornecedorDAO.buscaLike(jTextFieldNOME.getText().toUpperCase()));
            } else if (tipo == 4) {
                BancoDAO bancoDAO = new BancoDAO(connection);
                jTableTIPO.setModel(bancoDAO.buscaLike(jTextFieldNOME.getText().toUpperCase()));
            } else if (tipo == 5) {
                TipoPedidoDAO tipoPedidoDAO = new TipoPedidoDAO(connection);
                jTableTIPO.setModel(tipoPedidoDAO.buscaLike(jTextFieldNOME.getText().toUpperCase()));
            } else if (tipo == 6) {
                TipoPagamentoDAO tipoPagamentoDAO = new TipoPagamentoDAO(connection);
                jTableTIPO.setModel(tipoPagamentoDAO.buscaLike(jTextFieldNOME.getText().toUpperCase()));
            } else if (tipo == 7) {
                RotasDAO rotasDAO = new RotasDAO(connection);
                jTableTIPO.setModel(rotasDAO.buscaLike(jTextFieldNOME.getText().toUpperCase()));
            }

            jTableTIPO.getColumnModel().getColumn(0).setPreferredWidth(2);
            jTableTIPO.getColumnModel().getColumn(0).setResizable(false);
            jTableTIPO.getColumnModel().getColumn(1).setPreferredWidth(20);
            jTableTIPO.getColumnModel().getColumn(1).setResizable(false);

            jTableTIPO.getTableHeader().setReorderingAllowed(false);
            connection.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex);
            Logger.getLogger(FormularioClassicificacao.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonPesquisarActionPerformed

    private void jButtonExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirActionPerformed
        try {
            Connection connection = ConnectionFactory.getConnection();
            if (tipo == 1) {
                //cargo
                CargoDAO cargoDAO = new CargoDAO(connection);
                ModeloCargo modeloCargo = new ModeloCargo();
                modeloCargo.setId(Long.parseLong(jTextFieldID.getText()));
                cargoDAO.remove(modeloCargo);
                JOptionPane.showMessageDialog(rootPane, "cargo excluido com Sucesso");
            } else if (tipo == 2) {
                //nomenclatura
                RamoAtividadeDAO ramoAtividadeDAO = new RamoAtividadeDAO(connection);
                ModeloRamoAtividade modeloRamoAtividade = new ModeloRamoAtividade();
                modeloRamoAtividade.setId(Long.parseLong(jTextFieldID.getText()));
                ramoAtividadeDAO.remove(modeloRamoAtividade);
                JOptionPane.showMessageDialog(rootPane, "Medida excluida com Sucesso");
            } else if (tipo == 3) {
                TipoFornecedorDAO tipoFornecedorDAO = new TipoFornecedorDAO(connection);
                ModeloTipoFornecedor modeloTipoFornecedor = new ModeloTipoFornecedor();
                modeloTipoFornecedor.setId(Long.parseLong(jTextFieldID.getText()));
                tipoFornecedorDAO.remove(modeloTipoFornecedor);
                JOptionPane.showMessageDialog(rootPane, "Tipo de fornecedor excluido com Sucesso");
            } else if (tipo == 4) {
                BancoDAO bancoDAO = new BancoDAO(connection);
                ModeloBanco modeloBanco = new ModeloBanco();
                modeloBanco.setId(Long.parseLong(jTextFieldID.getText()));
                bancoDAO.remove(modeloBanco);
                JOptionPane.showMessageDialog(rootPane, "Banco excluido com Sucesso");
            } else if (tipo == 5) {
                TipoPedidoDAO tipoPedidoDAO = new TipoPedidoDAO(connection);
                ModeloTipoPedido modeloTipoPedido = new ModeloTipoPedido();
                modeloTipoPedido.setId(Long.parseLong(jTextFieldID.getText()));
                tipoPedidoDAO.remove(modeloTipoPedido);
                JOptionPane.showMessageDialog(rootPane, "Tipo de pedido excluido com Sucesso");
            } else if (tipo == 6) {
                TipoPagamentoDAO tipoPagamentoDAO = new TipoPagamentoDAO(connection);
                ModeloTipoPagamento modeloTipoPagamento = new ModeloTipoPagamento();
                modeloTipoPagamento.setId(Long.parseLong(jTextFieldID.getText()));
                tipoPagamentoDAO.remove(modeloTipoPagamento);
                JOptionPane.showMessageDialog(rootPane, "Tipo de pedido excluido com Sucesso");
            }else if (tipo == 7) {
                RotasDAO rotasDAO = new RotasDAO(connection);
                ModeloRota modeloRota = new ModeloRota();
                modeloRota.setId(Long.parseLong(jTextFieldID.getText()));
                rotasDAO.remove(modeloRota);
                JOptionPane.showMessageDialog(rootPane, "Rota excluido com Sucesso");
            }

            PreencherTabela(tipo);//TODO add your handling code here:
            connection.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex);
            JOptionPane.showConfirmDialog(rootPane, "Erro ao excluir os  Registro!!\n erro:" + ex);
        }
    }//GEN-LAST:event_jButtonExcluirActionPerformed

    private void jButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonSairActionPerformed

    private void jTableTIPOMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableTIPOMouseClicked
        String Id = "" + jTableTIPO.getValueAt(jTableTIPO.getSelectedRow(), 0);
        String Nome = "" + jTableTIPO.getValueAt(jTableTIPO.getSelectedRow(), 1);

        jTextFieldID.setText(Id);

        jTextFieldNOME.setText(Nome);

        // TODO add your handling code here:
    }//GEN-LAST:event_jTableTIPOMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormularioClassicificacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormularioClassicificacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormularioClassicificacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormularioClassicificacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormularioClassicificacao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAlterar;
    private javax.swing.JButton jButtonExcluir;
    private javax.swing.JButton jButtonNovo;
    private javax.swing.JButton jButtonPesquisar;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelClassificacao;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableTIPO;
    private javax.swing.JTextField jTextFieldID;
    private javax.swing.JTextField jTextFieldNOME;
    // End of variables declaration//GEN-END:variables
private String validacao() {
        String validar = "";

        int cont = 0;
        if (jTextFieldNOME.getText().isEmpty()) {
            validar += "Nome ";
            cont++;
        }
        if (cont != 0) {
            validar = "Campos obrigatorios: \n" + validar;
        }
        return validar;
    }

    public void ativaDesativaCampos(boolean status) {
        if (status == false) {
            jTextFieldNOME.setEnabled(false);
        } else if (status == true) {
            jTextFieldNOME.setEnabled(true);
        }
    }

    private void PreencherTabela(int tipo) throws SQLException {

        try (Connection connection = ConnectionFactory.getConnection()) {
            if (tipo == 1) {
                //tipo
                CargoDAO cargoDAO = new CargoDAO(connection);

                jTableTIPO.setModel(cargoDAO.buscaLike(jTextFieldNOME.getText()));
            } else if (tipo == 2) {
                //nomenclatura
                RamoAtividadeDAO ramoAtividadeDAO = new RamoAtividadeDAO(connection);
                jTableTIPO.setModel(ramoAtividadeDAO.buscaLike(jTextFieldNOME.getText()));
            } else if (tipo == 3) {
                TipoFornecedorDAO tipoFornecedorDAO = new TipoFornecedorDAO(connection);
                jTableTIPO.setModel(tipoFornecedorDAO.buscaLike(jTextFieldNOME.getText()));
            } else if (tipo == 4) {
                BancoDAO bancoDAO = new BancoDAO(connection);
                jTableTIPO.setModel(bancoDAO.buscaLike(jTextFieldNOME.getText()));
            } else if (tipo == 5) {
                TipoPedidoDAO tipoPedidoDAO = new TipoPedidoDAO(connection);
                jTableTIPO.setModel(tipoPedidoDAO.buscaLike(jTextFieldNOME.getText()));
            } else if (tipo == 6) {
                TipoPagamentoDAO tipoPagamentoDAO = new TipoPagamentoDAO(connection);
                jTableTIPO.setModel(tipoPagamentoDAO.buscaLike(jTextFieldNOME.getText()));
            }else if (tipo == 7) {
                RotasDAO rotasDAO = new RotasDAO(connection);
                jTableTIPO.setModel(rotasDAO.buscaLike(jTextFieldNOME.getText()));
            }

            jTableTIPO.getColumnModel().getColumn(0).setPreferredWidth(2);
            jTableTIPO.getColumnModel().getColumn(0).setResizable(false);
            jTableTIPO.getColumnModel().getColumn(1).setPreferredWidth(20);
            jTableTIPO.getColumnModel().getColumn(1).setResizable(false);

            jTableTIPO.getTableHeader().setReorderingAllowed(false);
            connection.close();
        }
    }

}
